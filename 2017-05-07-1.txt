---
date: 2017-05-07 20:27
status: public
title: 'java 解析xml的4中方法总结'
---

一 简介
在Java中，可以使用多种方式来解析XML文件，其中最常见的可能就是DOM、SAX、JDOM、DOM4J这四种方式了。其中，DOM和SAX这两种解析XML文件的方式有jdk自带的API，因此不需要额外引入第三方的jar包。与之相反的是，JDOM和DOM4J这两种解析方式都是第三方开源项目，因此在使用这两种方式解析XML文件时需要额外引入相关jar包
（1）DOM
DOM是用与平台和语言无关的方式表示XML文档的官方W3C标准。DOM是以层次结构组织的节点或信息片断的集合，这个层次结构允许开发人员在树中寻找特定信息。分析该结构通常需要加载整个文档和构造层次结构，然后才能做任何工作
因此在使用DOM这种方式来解析XML文件时，解析器需要将整个XML文件读到内存中，形成一个树形结构方便后面的操作
优点： 整个文档树在内存中，便于操作；支持删除、修改、重新排列等多种操作
缺点： 将整个文档调入内存（包括无用的节点），浪费时间和内存，如果XML过大容易出现内存溢出问题
1. 创建一个文档构建器工厂（DocumentBuilderFactory）实例
2. 通过上面的DocumentBuilderFactory生成一个新的文档构建器（DocumentBuilder）
3. 使用上面的DocumentBuilder解析（parse）一个XML文件，生成文档树（Document）
4. 通过Document获取指定id的节点或根据节点名获取所有符合条件的节点集合
5. 遍历每个节点，可以获取该节点的属性、属性值等相关参数
6. 如果该节点还存在子节点，可以根据上面的方式继续遍历它的所有子节点

（2）SAX
* 由于DOM解析XML文件时需要一次性读入整个文件，当文件过大时有诸多不足之处，因此为了解决这个问题，出现了SAX这种基于事件驱动的解析方式
* SAX解析XML文件通过从上往下依次不断载入内容到内存中，当解析器发现元素的开始标志、结束标志、文本、文档的开始标志、文档的结束标志等相关标志时，将会触发一些对应的事件，我们需要做的就是在这些事件的方法中编写自定义代码，用于保存获取到的数据
* 优点：不用事先载入整个文档，占用资源（内存）少；使用SAX方式解析编写的代码要比使用DOM解析编写的代码少
* 缺点：不是持久的；事件过后，若没保存数据，那么数据就丢了；无状态性；从事件中只能得到文本，但不知该文本属于哪个元素

（3）JDOM
* 使用JDOM来解析XML文件跟使用DOM来解析从代码上来说解析思路是差不多的。JDOM与DOM主要有两方面不同：首先，JDOM仅使用具体类而不使用接口，这在某些方面简化了API，但是也限制了灵活性。其次是JDOM的API大量使用了Collections类，简化了那些已经熟悉这些类的Java开发者的使用
* 优点：开源项目；比DOM容易理解
* 缺点：JDOM自身不包含解析器。它通常使用SAX2解析器来解析和验证输入XML文档

（4）DOM4J
* DOM4J 是一个非常非常优秀的Java XML API，具有性能优异、功能强大和极端易用使用的特点，同时它也是一个开放源代码的软件。如今你可以看到越来越多的 Java 软件都在使用 DOM4J 来读写 XML
* 由于DOM4J无论在性能方面还是代码编写方面都是很强大的，特别是当XML文件很大时使用DOM4J来解析也会有较高的效率。因此，建议平时需要解析XML文件可以考虑尽可能使用DOM4J来解析。当然如果文件非常小的话使用DOM来解析也是可以的
* 优点：
开源项目
DOM4J是JDOM的一种智能分支，它合并了需要超出基本XML文档的功能
具有性能优异、灵活性好、简单易用等特点