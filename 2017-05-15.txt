---
date: 2017-05-17 19:19
status: public
title: 'C 复习函数压栈，以及指针'
---

看看内存
```c
int main(void)
{
    int a[4] = {1, 2, 3, 4};
    int *ptr1=(int *)(&a+1);
    int *ptr2=(int *)((int)a+1);
    printf("%x, %x\n", ptr1[-1], *ptr2);
    return 0;
}
```
* 结果
```c
4, 2000000
Press any key to continue
```
* 内存
```c
0018FF28  CC CC CC CC  烫烫
0018FF2C  CC CC CC CC  烫烫
0018FF30  39 FF 18 00  9...
0018FF34  48 FF 18 00  H...
0018FF38  01 00 00 00  ....
0018FF3C  02 00 00 00  ....
0018FF40  03 00 00 00  ....
0018FF44  04 00 00 00  ....
0018FF48  88 FF 18 00  ....
```
* 地址 0x42aac7 在linux下面的存放形式是
x/100xh 0x7fffffffdfb8
```C
0x7fffffffdfb8:	0xaac7	0x0042	0x0000	0x0000	0x0001	0x0000	0x0001	0x0000
0x7fffffffdfc8:	0x0200	0x0000	0x0000	0x0000	0xe027	0xffff	0x7fff	0x0000
0x7fffffffdfd8:	0x5c79	0xf797	0x7fff	0x0000	0xca60	0x0063	0x0000	0x0
```
x/100xb 0x7fffffffdfb8
```C
0x7fffffffdfb8:	0xc7	0xaa	0x42	0x00	0x00	0x00	0x00	0x00
0x7fffffffdfc0:	0x01	0x00	0x00	0x00	0x01	0x00	0x00	0x00
0x7fffffffdfc8:	0x00	0x02	0x00	0x00	0x00	0x00	0x00	0x00
0x7fffffffdfd0:	0x27	0xe0	0xff	0xff	0xff	0x7f	0x00	0x00
0x7fffffffdfd8:	0x79	0x5c	0x97	0xf7	0xff	0x7f	0x00	0x00

```
* 在双字节一起打印的时候可能为了看着方便将双字节的高位放前面，地位放后面。实际上还是高高低低的原则。后面的内存图可以看出
* 今天看了一篇关于C函数压栈的文章总结的很好，已经保存在evernote，关于这方面的我就不写了。




